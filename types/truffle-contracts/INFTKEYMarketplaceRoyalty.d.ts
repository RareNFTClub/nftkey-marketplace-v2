/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface INFTKEYMarketplaceRoyaltyContract
  extends Truffle.Contract<INFTKEYMarketplaceRoyaltyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<INFTKEYMarketplaceRoyaltyInstance>;
}

export interface SetRoyalty {
  name: "SetRoyalty";
  args: {
    erc721Address: string;
    recipient: string;
    feeFraction: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = SetRoyalty;

export interface INFTKEYMarketplaceRoyaltyInstance
  extends Truffle.ContractInstance {
  /**
   * Royalty fee
   * @param erc721Address to read royalty
   */
  royalty(
    erc721Address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ recipient: string; feeFraction: BN; setBy: string }>;

  /**
   * Royalty fee
   * @param erc721Address to read royalty
   */
  setRoyalty: {
    (
      erc721Address: string,
      recipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      recipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      recipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      recipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Royalty fee
     * @param erc721Address to read royalty
     */
    royalty(
      erc721Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ recipient: string; feeFraction: BN; setBy: string }>;

    /**
     * Royalty fee
     * @param erc721Address to read royalty
     */
    setRoyalty: {
      (
        erc721Address: string,
        recipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        recipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        recipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        recipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
