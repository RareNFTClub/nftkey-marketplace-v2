/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface NFTKEYMarketplaceV2Contract
  extends Truffle.Contract<NFTKEYMarketplaceV2Instance> {
  "new"(
    _paymentTokenAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<NFTKEYMarketplaceV2Instance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface SetRoyalty {
  name: "SetRoyalty";
  args: {
    erc721Address: string;
    recipient: string;
    feeFraction: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface TokenBidAccepted {
  name: "TokenBidAccepted";
  args: {
    erc721Address: string;
    tokenId: BN;
    seller: string;
    bid: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    serviceFee: BN;
    royaltyFee: BN;
    0: string;
    1: BN;
    2: string;
    3: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    4: BN;
    5: BN;
  };
}

export interface TokenBidEntered {
  name: "TokenBidEntered";
  args: {
    erc721Address: string;
    tokenId: BN;
    bid: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
  };
}

export interface TokenBidWithdrawn {
  name: "TokenBidWithdrawn";
  args: {
    erc721Address: string;
    tokenId: BN;
    bid: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
  };
}

export interface TokenBought {
  name: "TokenBought";
  args: {
    erc721Address: string;
    tokenId: BN;
    buyer: string;
    listing: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    serviceFee: BN;
    royaltyFee: BN;
    0: string;
    1: BN;
    2: string;
    3: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    4: BN;
    5: BN;
  };
}

export interface TokenDelisted {
  name: "TokenDelisted";
  args: {
    erc721Address: string;
    tokenId: BN;
    listing: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
  };
}

export interface TokenListed {
  name: "TokenListed";
  args: {
    erc721Address: string;
    tokenId: BN;
    listing: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
  };
}

type AllEvents =
  | OwnershipTransferred
  | SetRoyalty
  | TokenBidAccepted
  | TokenBidEntered
  | TokenBidWithdrawn
  | TokenBought
  | TokenDelisted
  | TokenListed;

export interface NFTKEYMarketplaceV2Instance extends Truffle.ContractInstance {
  defaultRoyaltyFraction(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Royalty fee
   * @param erc721Address to read royalty
   */
  royalty(
    erc721Address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ recipient: string; feeFraction: BN; setBy: string }>;

  royaltyUpperLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setRoyalty: {
    (
      erc721Address: string,
      royaltyRecipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      royaltyRecipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      royaltyRecipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      royaltyRecipient: string,
      feeFraction: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateRoyaltyUpperLimit: {
    (
      _newUpperLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _newUpperLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newUpperLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newUpperLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-getTokenListing}.
   */
  getTokenListing(
    erc721Address: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; seller: string; expireTimestamp: BN }>;

  /**
   * See {INFTKEYMarketplaceV2-getTokenListings}.
   */
  getTokenListings(
    erc721Address: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; seller: string; expireTimestamp: BN }[]>;

  /**
   * See {INFTKEYMarketplaceV2-getBidderTokenBid}.
   */
  getBidderTokenBid(
    erc721Address: string,
    tokenId: number | BN | string,
    bidder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

  /**
   * See {INFTKEYMarketplaceV2-getTokenBids}.
   */
  getTokenBids(
    erc721Address: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]>;

  /**
   * See {INFTKEYMarketplaceV2-getTokenHighestBid}.
   */
  getTokenHighestBid(
    erc721Address: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

  /**
   * See {INFTKEYMarketplaceV2-getTokenHighestBids}.
   */
  getTokenHighestBids(
    erc721Address: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]>;

  /**
   * get all bids of a bidder address
   */
  getBidderBids(
    erc721Address: string,
    bidder: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]>;

  /**
   * See {INFTKEYMarketplaceV2-listToken}. People can only list if listing is allowed The timestamp set needs to be in the allowed range Only token owner can list token Price must be higher than 0 This contract must be approved to transfer this token
   */
  listToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-delistToken}. msg.sender must be the seller of the listing record
   */
  delistToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-buyToken}. Must have a valid listing msg.sender must not the owner of token msg.value must be at least sell price plus fees
   */
  buyToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-enterBidForToken}. People can only enter bid if bid is allowed The timestamp set needs to be in the allowed range bid price > 0 must not be token owner must allow this contract to spend enough payment token
   */
  enterBidForToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-withdrawBidForToken}. There must be a bid exists remove this bid record
   */
  withdrawBidForToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-acceptBidForToken}. Must be owner of this token Must have approved this contract to transfer token Must have a valid existing bid that matches the bidder address
   */
  acceptBidForToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-isTradingEnabled}.
   */
  isTradingEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Enable to disable Bids and Listing
   */
  changeMarketplaceStatus: {
    (enabled: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-actionTimeOutRangeMin}.
   */
  actionTimeOutRangeMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * See {INFTKEYMarketplaceV2-actionTimeOutRangeMax}.
   */
  actionTimeOutRangeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Change minimum listing and bid time range
   */
  changeMinActionTimeLimit: {
    (
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Change maximum listing and bid time range
   */
  changeMaxActionTimeLimit: {
    (
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      timeInSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {INFTKEYMarketplaceV2-serviceFee}.
   */
  serviceFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Change withdrawal fee percentage.
   * @param serviceFeeFraction_ Fraction of withdrawal fee based on 1000
   */
  changeSeriveFee: {
    (
      serviceFeeFraction_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      serviceFeeFraction_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      serviceFeeFraction_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      serviceFeeFraction_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    defaultRoyaltyFraction(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Royalty fee
     * @param erc721Address to read royalty
     */
    royalty(
      erc721Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ recipient: string; feeFraction: BN; setBy: string }>;

    royaltyUpperLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    setRoyalty: {
      (
        erc721Address: string,
        royaltyRecipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        royaltyRecipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        royaltyRecipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        royaltyRecipient: string,
        feeFraction: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateRoyaltyUpperLimit: {
      (
        _newUpperLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newUpperLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newUpperLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newUpperLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-getTokenListing}.
     */
    getTokenListing(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ tokenId: BN; value: BN; seller: string; expireTimestamp: BN }>;

    /**
     * See {INFTKEYMarketplaceV2-getTokenListings}.
     */
    getTokenListings(
      erc721Address: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; seller: string; expireTimestamp: BN }[]
    >;

    /**
     * See {INFTKEYMarketplaceV2-getBidderTokenBid}.
     */
    getBidderTokenBid(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

    /**
     * See {INFTKEYMarketplaceV2-getTokenBids}.
     */
    getTokenBids(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * See {INFTKEYMarketplaceV2-getTokenHighestBid}.
     */
    getTokenHighestBid(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

    /**
     * See {INFTKEYMarketplaceV2-getTokenHighestBids}.
     */
    getTokenHighestBids(
      erc721Address: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * get all bids of a bidder address
     */
    getBidderBids(
      erc721Address: string,
      bidder: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * See {INFTKEYMarketplaceV2-listToken}. People can only list if listing is allowed The timestamp set needs to be in the allowed range Only token owner can list token Price must be higher than 0 This contract must be approved to transfer this token
     */
    listToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-delistToken}. msg.sender must be the seller of the listing record
     */
    delistToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-buyToken}. Must have a valid listing msg.sender must not the owner of token msg.value must be at least sell price plus fees
     */
    buyToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-enterBidForToken}. People can only enter bid if bid is allowed The timestamp set needs to be in the allowed range bid price > 0 must not be token owner must allow this contract to spend enough payment token
     */
    enterBidForToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-withdrawBidForToken}. There must be a bid exists remove this bid record
     */
    withdrawBidForToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-acceptBidForToken}. Must be owner of this token Must have approved this contract to transfer token Must have a valid existing bid that matches the bidder address
     */
    acceptBidForToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-isTradingEnabled}.
     */
    isTradingEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Enable to disable Bids and Listing
     */
    changeMarketplaceStatus: {
      (enabled: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-actionTimeOutRangeMin}.
     */
    actionTimeOutRangeMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * See {INFTKEYMarketplaceV2-actionTimeOutRangeMax}.
     */
    actionTimeOutRangeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Change minimum listing and bid time range
     */
    changeMinActionTimeLimit: {
      (
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Change maximum listing and bid time range
     */
    changeMaxActionTimeLimit: {
      (
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        timeInSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {INFTKEYMarketplaceV2-serviceFee}.
     */
    serviceFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Change withdrawal fee percentage.
     * @param serviceFeeFraction_ Fraction of withdrawal fee based on 1000
     */
    changeSeriveFee: {
      (
        serviceFeeFraction_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        serviceFeeFraction_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        serviceFeeFraction_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        serviceFeeFraction_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
