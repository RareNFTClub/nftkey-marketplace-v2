/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface INFTKEYMarketplaceV2Contract
  extends Truffle.Contract<INFTKEYMarketplaceV2Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<INFTKEYMarketplaceV2Instance>;
}

export interface TokenBidAccepted {
  name: "TokenBidAccepted";
  args: {
    erc721Address: string;
    tokenId: BN;
    seller: string;
    bid: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    serviceFee: BN;
    royaltyFee: BN;
    0: string;
    1: BN;
    2: string;
    3: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    4: BN;
    5: BN;
  };
}

export interface TokenBidEntered {
  name: "TokenBidEntered";
  args: {
    erc721Address: string;
    tokenId: BN;
    bid: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
  };
}

export interface TokenBidWithdrawn {
  name: "TokenBidWithdrawn";
  args: {
    erc721Address: string;
    tokenId: BN;
    bid: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN };
  };
}

export interface TokenBought {
  name: "TokenBought";
  args: {
    erc721Address: string;
    tokenId: BN;
    buyer: string;
    listing: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    serviceFee: BN;
    royaltyFee: BN;
    0: string;
    1: BN;
    2: string;
    3: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    4: BN;
    5: BN;
  };
}

export interface TokenDelisted {
  name: "TokenDelisted";
  args: {
    erc721Address: string;
    tokenId: BN;
    listing: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
  };
}

export interface TokenListed {
  name: "TokenListed";
  args: {
    erc721Address: string;
    tokenId: BN;
    listing: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
    0: string;
    1: BN;
    2: { tokenId: BN; value: BN; seller: string; expireTimestamp: BN };
  };
}

type AllEvents =
  | TokenBidAccepted
  | TokenBidEntered
  | TokenBidWithdrawn
  | TokenBought
  | TokenDelisted
  | TokenListed;

export interface INFTKEYMarketplaceV2Instance extends Truffle.ContractInstance {
  /**
   * List token for sale
   * @param expireTimestamp when would this listing expire
   * @param tokenId erc721 token Id
   * @param value min price to sell the token
   */
  listToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Delist token for sale
   * @param tokenId erc721 token Id
   */
  delistToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Buy token
   * @param tokenId erc721 token Id
   */
  buyToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Enter bid for token
   * @param expireTimestamp when would this bid expire
   * @param tokenId erc721 token Id
   * @param value price in payment token
   */
  enterBidForToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw bid for token
   * @param tokenId erc721 token Id
   */
  withdrawBidForToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Accept a bid of token from a bidder
   * @param bidder bidder address
   * @param tokenId erc721 token Id
   * @param value value of a bid to avoid frontrun attack
   */
  acceptBidForToken: {
    (
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Show if listing and bid are enabled
   */
  isTradingEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * get current listing of a token
   * @param tokenId erc721 token Id
   */
  getTokenListing(
    erc721Address: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; seller: string; expireTimestamp: BN }>;

  /**
   * get count of listings
   */
  numTokenListings(
    erc721Address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * get current valid listings by size
   * @param from index to start
   * @param size size to query
   */
  getTokenListings(
    erc721Address: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; seller: string; expireTimestamp: BN }[]>;

  /**
   * get bidder's bid on a token
   * @param bidder address of a bidder
   * @param tokenId erc721 token Id
   */
  getBidderTokenBid(
    erc721Address: string,
    tokenId: number | BN | string,
    bidder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

  /**
   * get all valid bids of a token
   * @param tokenId erc721 token Id
   */
  getTokenBids(
    erc721Address: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]>;

  /**
   * get count of tokens with bid(s)
   */
  numTokenWithBids(
    erc721Address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * get highest bid of a token
   * @param tokenId erc721 token Id
   */
  getTokenHighestBid(
    erc721Address: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

  /**
   * get current highest bids
   * @param from index to start
   * @param size size to query
   */
  getTokenHighestBids(
    erc721Address: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]>;

  /**
   * get all bids of a bidder address
   */
  getBidderBids(
    erc721Address: string,
    bidder: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]>;

  /**
   * Surface minimum listing and bid time range
   */
  actionTimeOutRangeMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Surface maximum listing and bid time range
   */
  actionTimeOutRangeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Payment token address
   */
  paymentToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Service fee
   */
  serviceFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    /**
     * List token for sale
     * @param expireTimestamp when would this listing expire
     * @param tokenId erc721 token Id
     * @param value min price to sell the token
     */
    listToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Delist token for sale
     * @param tokenId erc721 token Id
     */
    delistToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Buy token
     * @param tokenId erc721 token Id
     */
    buyToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Enter bid for token
     * @param expireTimestamp when would this bid expire
     * @param tokenId erc721 token Id
     * @param value price in payment token
     */
    enterBidForToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw bid for token
     * @param tokenId erc721 token Id
     */
    withdrawBidForToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Accept a bid of token from a bidder
     * @param bidder bidder address
     * @param tokenId erc721 token Id
     * @param value value of a bid to avoid frontrun attack
     */
    acceptBidForToken: {
      (
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc721Address: string,
        tokenId: number | BN | string,
        bidder: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Show if listing and bid are enabled
     */
    isTradingEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * get current listing of a token
     * @param tokenId erc721 token Id
     */
    getTokenListing(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ tokenId: BN; value: BN; seller: string; expireTimestamp: BN }>;

    /**
     * get count of listings
     */
    numTokenListings(
      erc721Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * get current valid listings by size
     * @param from index to start
     * @param size size to query
     */
    getTokenListings(
      erc721Address: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; seller: string; expireTimestamp: BN }[]
    >;

    /**
     * get bidder's bid on a token
     * @param bidder address of a bidder
     * @param tokenId erc721 token Id
     */
    getBidderTokenBid(
      erc721Address: string,
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

    /**
     * get all valid bids of a token
     * @param tokenId erc721 token Id
     */
    getTokenBids(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * get count of tokens with bid(s)
     */
    numTokenWithBids(
      erc721Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * get highest bid of a token
     * @param tokenId erc721 token Id
     */
    getTokenHighestBid(
      erc721Address: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }>;

    /**
     * get current highest bids
     * @param from index to start
     * @param size size to query
     */
    getTokenHighestBids(
      erc721Address: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * get all bids of a bidder address
     */
    getBidderBids(
      erc721Address: string,
      bidder: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; value: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * Surface minimum listing and bid time range
     */
    actionTimeOutRangeMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Surface maximum listing and bid time range
     */
    actionTimeOutRangeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Payment token address
     */
    paymentToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Service fee
     */
    serviceFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
